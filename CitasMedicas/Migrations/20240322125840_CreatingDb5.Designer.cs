// <auto-generated />
using System;
using CitasMedicas.BBDD;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CitasMedicas.Migrations
{
    [DbContext(typeof(CitasMedicasDB))]
    [Migration("20240322125840_CreatingDb5")]
    partial class CreatingDb5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CitasMedicas.Models.AppoModel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<int>("attribute11")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaHora")
                        .HasColumnType("datetime2");

                    b.Property<long>("medico_id")
                        .HasColumnType("bigint");

                    b.Property<string>("motivoCita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("paciente_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("medico_id");

                    b.HasIndex("paciente_id");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("CitasMedicas.Models.DiagModel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<long>("cita_id")
                        .HasColumnType("bigint");

                    b.Property<string>("enfermedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("valoracionEspecialista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("cita_id")
                        .IsUnique();

                    b.ToTable("Diagnostico");
                });

            modelBuilder.Entity("CitasMedicas.Models.UserModel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Usuario");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MedicModelPacientModel", b =>
                {
                    b.Property<long>("medicosid")
                        .HasColumnType("bigint");

                    b.Property<long>("pacientesid")
                        .HasColumnType("bigint");

                    b.HasKey("medicosid", "pacientesid");

                    b.HasIndex("pacientesid");

                    b.ToTable("MedicModelPacientModel");
                });

            modelBuilder.Entity("CitasMedicas.Models.MedicModel", b =>
                {
                    b.HasBaseType("CitasMedicas.Models.UserModel");

                    b.Property<string>("numColegiado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("numColegiado");

                    b.HasDiscriminator().HasValue("MedicModel");

                    b.HasData(
                        new
                        {
                            id = -2L,
                            apellidos = "Pujante",
                            clave = "1234",
                            nombre = "Mario",
                            usuario = "MPujante",
                            numColegiado = "12345A"
                        });
                });

            modelBuilder.Entity("CitasMedicas.Models.PacientModel", b =>
                {
                    b.HasBaseType("CitasMedicas.Models.UserModel");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<string>("nss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NSS");

                    b.Property<string>("numTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("numTarjeta");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono");

                    b.HasDiscriminator().HasValue("PacientModel");

                    b.HasData(
                        new
                        {
                            id = -1L,
                            apellidos = "López",
                            clave = "1234",
                            nombre = "Pepe",
                            usuario = "PLopez",
                            direccion = "Mi casa",
                            nss = "123123123",
                            numTarjeta = "123321123",
                            telefono = "345345345"
                        });
                });

            modelBuilder.Entity("CitasMedicas.Models.AppoModel", b =>
                {
                    b.HasOne("CitasMedicas.Models.MedicModel", "medico")
                        .WithMany("citas")
                        .HasForeignKey("medico_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CitasMedicas.Models.PacientModel", "paciente")
                        .WithMany("citas")
                        .HasForeignKey("paciente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medico");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("CitasMedicas.Models.DiagModel", b =>
                {
                    b.HasOne("CitasMedicas.Models.AppoModel", "cita")
                        .WithOne("diagnostico")
                        .HasForeignKey("CitasMedicas.Models.DiagModel", "cita_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cita");
                });

            modelBuilder.Entity("MedicModelPacientModel", b =>
                {
                    b.HasOne("CitasMedicas.Models.MedicModel", null)
                        .WithMany()
                        .HasForeignKey("medicosid")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CitasMedicas.Models.PacientModel", null)
                        .WithMany()
                        .HasForeignKey("pacientesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CitasMedicas.Models.AppoModel", b =>
                {
                    b.Navigation("diagnostico")
                        .IsRequired();
                });

            modelBuilder.Entity("CitasMedicas.Models.MedicModel", b =>
                {
                    b.Navigation("citas");
                });

            modelBuilder.Entity("CitasMedicas.Models.PacientModel", b =>
                {
                    b.Navigation("citas");
                });
#pragma warning restore 612, 618
        }
    }
}
